// Code generated by MockGen. DO NOT EDIT.
// Source: db/helpers/sqlhelpers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v4"
)

// MockDBQuerier is a mock of DBQuerier interface.
type MockDBQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockDBQuerierMockRecorder
}

// MockDBQuerierMockRecorder is the mock recorder for MockDBQuerier.
type MockDBQuerierMockRecorder struct {
	mock *MockDBQuerier
}

// NewMockDBQuerier creates a new mock instance.
func NewMockDBQuerier(ctrl *gomock.Controller) *MockDBQuerier {
	mock := &MockDBQuerier{ctrl: ctrl}
	mock.recorder = &MockDBQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBQuerier) EXPECT() *MockDBQuerierMockRecorder {
	return m.recorder
}

// QueryRow mocks base method.
func (m *MockDBQuerier) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDBQuerierMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBQuerier)(nil).QueryRow), varargs...)
}
